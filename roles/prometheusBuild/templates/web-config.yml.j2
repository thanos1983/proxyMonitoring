# TLS and basic authentication configuration example.
#
# Additionally, a certificate and a key file are needed.
tls_server_config:
  # Certificate and key files for server to use to authenticate to client.
  cert_file: /{{ prometheus.cert.dir }}/{{ prometheus.cert.files.crt }}
  key_file: /{{ prometheus.cert.dir }}/{{ prometheus.cert.files.key }}

  # Server policy for client authentication. Maps to ClientAuth Policies.
  # For more detail on clientAuth options:
  # https://golang.org/pkg/crypto/tls/#ClientAuthType
  # client_auth_type: "RequireAndVerifyClientCert"
  client_auth_type: "NoClientCert"

  # CA certificate for client certificate authentication to the server.
  # client_ca_file: /{{ prometheus.cert.dir }}/{{ prometheus.cert.files.ca }}

  # Minimum TLS version that is acceptable.
  min_version: "TLS12"

  # Maximum TLS version that is acceptable.
  max_version: "TLS13"

  # List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
  # Go default cipher suites are used. Available cipher suites are documented
  # in the go documentation:
  # https://golang.org/pkg/crypto/tls/#pkg-constants
  cipher_suites:
    # TLS 1.2 cipher suites.
    - TLS_RSA_WITH_3DES_EDE_CBC_SHA
    - TLS_RSA_WITH_AES_128_CBC_SHA
    - TLS_RSA_WITH_AES_256_CBC_SHA
    - TLS_RSA_WITH_AES_128_GCM_SHA256
    - TLS_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    # TLS 1.3 cipher suites.
    - TLS_AES_128_GCM_SHA256
    - TLS_AES_256_GCM_SHA384
    - TLS_CHACHA20_POLY1305_SHA256

  # prefer_server_cipher_suites controls whether the server selects the
  # client's most preferred ciphersuite, or the server's most preferred
  # ciphersuite. If true then the server's preference, as expressed in
  # the order of elements in cipher_suites, is used.
  prefer_server_cipher_suites: true

  # Elliptic curves that will be used in an ECDHE handshake, in preference
  # order. Available curves are documented in the go documentation:
  # https://golang.org/pkg/crypto/tls/#CurveID
  curve_preferences:
    - CurveP256
    - CurveP384
    - CurveP521
    - X25519

http_server_config:
  # Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
  # This can not be changed on the fly.
  # http2: false
  http2: false

# Usernames and hashed passwords that have full access to the web
# server via basic authentication. If empty, no basic authentication is
# required. Passwords are hashed with bcrypt.
basic_auth_users:
  support-dev: $2y$10$WcRSWpBkYGNrqbc.onQ3ke6bIJCnX2VGmwVdZzXUTzuWn9vb3BIFq
